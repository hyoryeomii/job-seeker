# -*- coding: utf-8 -*-
"""취준생.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QOY9Wj2_-uilZBoSFCqEaK6jArOyt5ux
"""

import pandas as pd
from sklearn.metrics import confusion_matrix, f1_score

# CSV 파일을 불러옵니다.
data = pd.read_csv("qualification.csv", encoding="cp949")

import pandas as pd
from sklearn.metrics import confusion_matrix, f1_score
import sklearn

# pandas 버전 출력
print("pandas 버전:", pd.__version__)

# scikit-learn 버전 출력
print("scikit-learn 버전:", sklearn.__version__)

data.head()

# 실제값과 예측값을 추출합니다.
x_train = data.iloc[:,0:17]#.values
y_train = data.iloc[:,17]#.values

x_train.head()

y_train.head()

x_train.replace({'O': 1, 'X': 0}, inplace=True)

x_train.head()

import numpy as np

# 숫자형 데이터만 포함된 새로운 데이터프레임 생성
numeric_df = x_train.select_dtypes(include=[np.number])

x_train = x_train.fillna(1)
x_train.head()

df = pd.DataFrame(data)

# '-'를 0으로 대체하고 문자열을 숫자로 변환하는 함수
def convert_to_new_score(toeic_score):
    if toeic_score == '-':
        return 0
    else:
        return float(toeic_score) / 990.0

# '토익' 열에 있는 각 토익 점수를 새로운 점수로 변환
df['토익'] = df['토익'].apply(convert_to_new_score)

# 변환된 데이터프레임 출력
print(df)
# x_train이 df와 같은 데이터프레임을 참조하도록 설정
x_train = df

# 변환된 데이터프레임의 내용 확인
print(x_train.head())

x_train.replace({'AL': 5, 'IH': 4, 'IM2': 3, 'IM1': 2, 'IL': 1 }, inplace=True) #오픽

x_train.replace({'Lv7': 4,'Lv6': 3,'Lv5': 2,'Lv4': 1}, inplace=True) #토익스피킹

x_train.head()

x_train.replace({'A': 30, 'B': 25, 'C': 15, 'D': 5}, inplace=True) # A = 4.0~4.5, B = 3.5~4.0, C = 3.0~3.5, D = 3.0미만

x_train.replace({'-': 0}, inplace=True)
x_train.head()

x_train['자격증'] = x_train['자격증'].astype(float)
x_train['외국어'] = x_train['외국어'].astype(float)
x_train['해외경험'] = x_train['해외경험'].astype(float)
x_train['인턴'] = x_train['인턴'].astype(float)
x_train['수상내역'] = x_train['수상내역'].astype(float)
x_train['교내/봉사'] = x_train['교내/봉사'].astype(float)
x_train['토익'] = x_train['토익'].astype(float)

y_train.replace({'O': 1, 'X': 0}, inplace=True)


y_train.fillna(1, inplace=True)
y_train.head()

x_train.info()

x_train = x_train.drop(['합격여부'], axis=1)

x_train.info()

def min_max_normalize(column):
  return(column - column.min())/(column.max() - column.min())

x_train = x_train.apply(min_max_normalize)
df.fillna(1.0, inplace=True)
x_train.head()

# NaN을 1.0으로 변환
x_train.fillna(1.0, inplace=True)

x_train.head()

import numpy as np

# 숫자형 데이터만 포함된 새로운 데이터프레임 생성
numeric_df = x_train.select_dtypes(include=[np.number])

x_train.describe()

print(y_train.unique())

correlations = x_train.corrwith(y_train)

correlations

y_train.info()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
X_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)
random_forest = RandomForestClassifier(n_estimators=100)
random_forest.fit(X_train, Y_train)
predictions=random_forest.predict(X_val)

print(predictions)

print(Y_val)

from sklearn.metrics import confusion_matrix, f1_score, accuracy_score, precision_score, recall_score

# Confusion Matrix를 계산합니다.
cm = confusion_matrix(Y_val, predictions)
print("Confusion Matrix:")
print(cm)

# F1-score를 계산합니다.
f1 = f1_score(Y_val, predictions)
print("F1-score:", f1)

# Accuracy를 계산합니다.
accuracy = accuracy_score(Y_val, predictions)
print("Accuracy:", accuracy)

# Precision을 계산합니다.
precision = precision_score(Y_val, predictions)
print("Precision:", precision)

# Recall을 계산합니다.
recall = recall_score(Y_val, predictions)
print("Recall:", recall)

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, f1_score, accuracy_score, precision_score, recall_score

# 실제 값과 예측 값을 사용하여 Confusion Matrix를 계산합니다.
cm = confusion_matrix(Y_val, predictions)
print("Confusion Matrix:")
print(cm)

# F1-score를 계산합니다.
f1 = f1_score(Y_val, predictions)
print("F1-score:", f1)

# Accuracy를 계산합니다.
accuracy = accuracy_score(Y_val, predictions)
print("Accuracy:", accuracy)

# Precision을 계산합니다.
precision = precision_score(Y_val, predictions)
print("Precision:", precision)

# Recall을 계산합니다.
recall = recall_score(Y_val, predictions)
print("Recall:", recall)

# 평가 지표를 데이터프레임으로 저장합니다.
metrics = {
    "Metric": ["Accuracy", "Precision", "Recall", "F1 Score"],
    "Value": [accuracy, precision, recall, f1]
}

df_metrics = pd.DataFrame(metrics)

# 평가 지표를 표로 출력합니다.
print("\nModel Evaluation Metrics:")
print(df_metrics)

# 평가 지표를 막대 그래프로 시각화합니다.
plt.figure(figsize=(10, 6))
plt.barh(df_metrics['Metric'], df_metrics['Value'], color='skyblue')
plt.xlabel('Value')
plt.title('Model Evaluation Metrics')
plt.xlim(0, 1)
for index, value in enumerate(df_metrics['Value']):
    plt.text(value, index, f'{value:.2f}', va='center')
plt.show()

